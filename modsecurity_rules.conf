# modsecurity_rules.conf
# ModSecurity Custom Rules for SQL Injection Protection
# 
# This configuration provides comprehensive protection against SQL injection attacks
# and should be used in conjunction with the OWASP Core Rule Set (CRS)

# Basic ModSecurity Configuration
SecRuleEngine On
SecRequestBodyAccess On
SecResponseBodyAccess Off
SecRequestBodyLimit 13107200
SecRequestBodyNoFilesLimit 131072
SecRequestBodyInMemoryLimit 131072
SecRequestBodyLimitAction Reject
SecPcreMatchLimit 1000
SecPcreMatchLimitRecursion 1000

# Audit Logging
SecAuditEngine RelevantOnly
SecAuditLogRelevantStatus "^(?:5|4(?!04))"
SecAuditLogParts ABDEFHIJZ
SecAuditLogType Serial
SecAuditLog /var/log/apache2/modsec_audit.log

# Debug Logging (disable in production)
SecDebugLog /var/log/apache2/modsec_debug.log
SecDebugLogLevel 0

# Custom SQL Injection Protection Rules

# Rule 100001: Detect common SQL injection patterns in POST data
SecRule ARGS "@detectSQLi" \
    "id:100001,\
    phase:2,\
    block,\
    msg:'SQL Injection Attack Detected',\
    logdata:'Matched Data: %{MATCHED_VAR} found within %{MATCHED_VAR_NAME}',\
    tag:'attack-sqli',\
    tag:'OWASP_CRS/WEB_ATTACK/SQL_INJECTION',\
    severity:'CRITICAL',\
    setvar:'tx.sqli_score=+5',\
    setvar:'tx.anomaly_score=+%{tx.critical_anomaly_score}'"

# Rule 100002: Detect SQL keywords in parameters
SecRule ARGS "@rx (?i:(union|select|insert|delete|update|drop|create|alter|exec|execute|declare|cast|chr|concat|substring|ascii|hex|unhex|md5|sha1|benchmark|sleep|waitfor|delay))" \
    "id:100002,\
    phase:2,\
    block,\
    msg:'SQL Keywords Detected in Parameters',\
    logdata:'Matched Data: %{MATCHED_VAR} found within %{MATCHED_VAR_NAME}',\
    tag:'attack-sqli',\
    severity:'WARNING',\
    setvar:'tx.sqli_score=+3',\
    setvar:'tx.anomaly_score=+%{tx.warning_anomaly_score}'"

# Rule 100003: Detect SQL comment sequences
SecRule ARGS "@rx (?:--|#|/\*|\*/)" \
    "id:100003,\
    phase:2,\
    block,\
    msg:'SQL Comment Sequence Detected',\
    logdata:'Matched Data: %{MATCHED_VAR} found within %{MATCHED_VAR_NAME}',\
    tag:'attack-sqli',\
    severity:'WARNING',\
    setvar:'tx.sqli_score=+2',\
    setvar:'tx.anomaly_score=+%{tx.warning_anomaly_score}'"

# Rule 100004: Detect SQL logical operators used in injection
SecRule ARGS "@rx (?i:(\s+(and|or|not)\s+[\d\w]+[\s]*[=<>]+[\s]*[\d\w]+))" \
    "id:100004,\
    phase:2,\
    block,\
    msg:'SQL Logical Operator Injection Pattern',\
    logdata:'Matched Data: %{MATCHED_VAR} found within %{MATCHED_VAR_NAME}',\
    tag:'attack-sqli',\
    severity:'WARNING',\
    setvar:'tx.sqli_score=+3',\
    setvar:'tx.anomaly_score=+%{tx.warning_anomaly_score}'"

# Rule 100005: Detect common SQLi authentication bypass attempts
SecRule ARGS "@rx (?i:(admin['\"]?\s*(or|and)\s*['\"]?1['\"]?\s*[=<>]\s*['\"]?1|['\"]?\s*(or|and)\s*['\"]?1['\"]?\s*[=<>]\s*['\"]?1))" \
    "id:100005,\
    phase:2,\
    block,\
    msg:'SQL Authentication Bypass Attempt',\
    logdata:'Matched Data: %{MATCHED_VAR} found within %{MATCHED_VAR_NAME}',\
    tag:'attack-sqli',\
    tag:'attack-auth-bypass',\
    severity:'CRITICAL',\
    setvar:'tx.sqli_score=+5',\
    setvar:'tx.anomaly_score=+%{tx.critical_anomaly_score}'"

# Rule 100006: Detect UNION-based injection attempts
SecRule ARGS "@rx (?i:union\s+(all\s+)?select)" \
    "id:100006,\
    phase:2,\
    block,\
    msg:'UNION-based SQL Injection Detected',\
    logdata:'Matched Data: %{MATCHED_VAR} found within %{MATCHED_VAR_NAME}',\
    tag:'attack-sqli',\
    tag:'attack-sqli-union',\
    severity:'CRITICAL',\
    setvar:'tx.sqli_score=+5',\
    setvar:'tx.anomaly_score=+%{tx.critical_anomaly_score}'"

# Rule 100007: Detect time-based blind SQL injection
SecRule ARGS "@rx (?i:(sleep|waitfor|delay|benchmark)\s*\()" \
    "id:100007,\
    phase:2,\
    block,\
    msg:'Time-based SQL Injection Detected',\
    logdata:'Matched Data: %{MATCHED_VAR} found within %{MATCHED_VAR_NAME}',\
    tag:'attack-sqli',\
    tag:'attack-sqli-blind',\
    severity:'CRITICAL',\
    setvar:'tx.sqli_score=+5',\
    setvar:'tx.anomaly_score=+%{tx.critical_anomaly_score}'"

# Rule 100008: Rate limiting for login attempts on protected endpoint
SecRule REQUEST_URI "@streq /protected_login" \
    "id:100008,\
    phase:1,\
    pass,\
    initcol:ip=%{REMOTE_ADDR},\
    setvar:ip.login_attempts=+1,\
    expirevar:ip.login_attempts=300,\
    nolog"

SecRule REQUEST_URI "@streq /protected_login" \
    "id:100009,\
    phase:1,\
    deny,\
    status:429,\
    msg:'Rate limit exceeded for login attempts',\
    tag:'rate-limiting',\
    severity:'WARNING',\
    chain"
    SecRule IP:LOGIN_ATTEMPTS "@gt 5"

# Rule 100010: Block suspicious user agents commonly used by automated tools
SecRule REQUEST_HEADERS:User-Agent "@rx (?i:(sqlmap|havij|nmap|nikto|burp|w3af|owasp))" \
    "id:100010,\
    phase:1,\
    block,\
    msg:'Suspicious User Agent - Potential Security Scanner',\
    logdata:'User Agent: %{REQUEST_HEADERS.User-Agent}',\
    tag:'attack-scanner',\
    severity:'WARNING',\
    setvar:'tx.anomaly_score=+%{tx.warning_anomaly_score}'"

# Rule 100011: Monitor and alert on high SQL injection scores
SecRule TX:SQLI_SCORE "@ge 5" \
    "id:100011,\
    phase:5,\
    pass,\
    msg:'High SQL Injection Score - Potential Attack',\
    logdata:'Total SQL Injection Score: %{TX.sqli_score}',\
    tag:'attack-sqli',\
    tag:'high-risk',\
    severity:'CRITICAL'"

# Rule 100012: Custom protection for specific vulnerable endpoints
SecRule REQUEST_URI "@streq /vulnerable_login" \
    "id:100012,\
    phase:1,\
    pass,\
    msg:'Access to vulnerable endpoint - monitoring',\
    tag:'vulnerable-endpoint',\
    severity:'NOTICE',\
    setvar:'tx.vulnerable_access=1'"

# Initialize scoring variables
SecAction \
    "id:100000,\
    phase:1,\
    nolog,\
    pass,\
    setvar:tx.critical_anomaly_score=5,\
    setvar:tx.error_anomaly_score=4,\
    setvar:tx.warning_anomaly_score=3,\
    setvar:tx.notice_anomaly_score=2,\
    setvar:tx.anomaly_score=0,\
    setvar:tx.sqli_score=0"

# Block requests with high anomaly scores
SecRule TX:ANOMALY_SCORE "@ge 5" \
    "id:100099,\
    phase:5,\
    deny,\
    status:403,\
    msg:'Request blocked due to high anomaly score',\
    logdata:'Total Anomaly Score: %{TX.anomaly_score}',\
    tag:'attack-blocked',\
    severity:'CRITICAL'"